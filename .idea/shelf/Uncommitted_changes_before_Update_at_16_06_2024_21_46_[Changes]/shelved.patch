Index: Tecnicas_de_programacion/Ejemplos_de_tecnicas_programacion.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Abstracción: Definimos una clase abstracta Vehiculo\r\nfrom abc import ABC, abstractmethod\r\n\r\n\r\nclass Vehiculo(ABC):\r\n    def __init__(self, marca, modelo):\r\n        self._marca = marca  # Encapsulación: Uso de atributos privados\r\n        self._modelo = modelo\r\n\r\n    @abstractmethod\r\n    def arrancar(self):\r\n        pass\r\n\r\n    @abstractmethod\r\n    def detener(self):\r\n        pass\r\n\r\n    def obtener_informacion(self):\r\n        return f\"Marca: {self._marca}, Modelo: {self._modelo}\"\r\n\r\n\r\n# Herencia: La clase Coche hereda de Vehiculo\r\nclass Coche(Vehiculo):\r\n    def __init__(self, marca, modelo, puertas):\r\n        super().__init__(marca, modelo)\r\n        self._puertas = puertas  # Encapsulación: Uso de atributos privados\r\n\r\n    def arrancar(self):\r\n        return \"El coche ha arrancado\"\r\n\r\n    def detener(self):\r\n        return \"El coche se ha detenido\"\r\n\r\n    def obtener_informacion(self):\r\n        return f\"{super().obtener_informacion()}, Puertas: {self._puertas}\"\r\n\r\n\r\n# Herencia: La clase Moto hereda de Vehiculo\r\nclass Moto(Vehiculo):\r\n    def __init__(self, marca, modelo, tipo):\r\n        super().__init__(marca, modelo)\r\n        self._tipo = tipo  # Encapsulación: Uso de atributos privados\r\n\r\n    def arrancar(self):\r\n        return \"La moto ha arrancado\"\r\n\r\n    def detener(self):\r\n        return \"La moto se ha detenido\"\r\n\r\n    def obtener_informacion(self):\r\n        return f\"{super().obtener_informacion()}, Tipo: {self._tipo}\"\r\n\r\n\r\n# Polimorfismo: Usamos una lista de vehículos y llamamos a métodos que se comportan de manera diferente\r\nvehiculos = [\r\n    Coche(\"Toyota\", \"Corolla\", 4),\r\n    Moto(\"Harley Davidson\", \"Sportster\", \"Cruiser\")\r\n]\r\n\r\nfor vehiculo in vehiculos:\r\n    print(vehiculo.arrancar())\r\n    print(vehiculo.detener())\r\n    print(vehiculo.obtener_informacion())\r\n    print(\"-\" * 30)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Tecnicas_de_programacion/Ejemplos_de_tecnicas_programacion.py b/Tecnicas_de_programacion/Ejemplos_de_tecnicas_programacion.py
--- a/Tecnicas_de_programacion/Ejemplos_de_tecnicas_programacion.py	
+++ b/Tecnicas_de_programacion/Ejemplos_de_tecnicas_programacion.py	
@@ -19,7 +19,7 @@
         return f"Marca: {self._marca}, Modelo: {self._modelo}"
 
 
-# Herencia: La clase Coche hereda de Vehiculo
+# Encapsulacion: La clase Coche hereda de Vehiculo
 class Coche(Vehiculo):
     def __init__(self, marca, modelo, puertas):
         super().__init__(marca, modelo)
@@ -61,4 +61,4 @@
     print(vehiculo.arrancar())
     print(vehiculo.detener())
     print(vehiculo.obtener_informacion())
-    print("-" * 30)
+    print("-" * 30)
\ No newline at end of file
